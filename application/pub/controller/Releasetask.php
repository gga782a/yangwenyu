<?php
/**
 * Created by PhpStorm.
 * User: ztwl
 * Date: 2018/10/12
 * Time: 上午9:07
 */

namespace app\pub\controller;

use aap\pub\Controller;
use think\Validate;

class Releasetask extends Controller
{
    //站长
    public static $table_user = 'user';
    public static $primarykey_user = 'id';

    //互转卷
    public static $table_hz = 'hz';
    public static $primarykey_hz = 'id';
    //文章
    public static $table_infolist = 'infolist';
    public static $primarykey_infolist = 'id';
    //任务
    public static $table_mission = 'mission';
    public static $primarykey_mission = 'id';
    public $time;
    public static $msg = [];

    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
        $this->time = time();
        self::$msg = array_merge(DataAnalysis::$msg,self::$msg);
    }

    public function releasetask()
    {
        $rule = [
            'userid' => 'require',
            'hz'     => 'require',
            'wz'     => 'require',
            'money'  => 'require',
        ];

        $field = [
            'userid' => '站长ID',
            'hz'     => '互转卷',
            'wz'     => '文章信息',
            'money'  => '每次收益金额',
        ];

        $validate = new Validate($rule,self::$msg,$field);

        if(!$validate->check($this->parme)){
            $this->abnormal($this->ValitorError,$validate->getError());
        }else{
            $hz = json_decode($this->parme('hz'),true);
            $wz = json_decode($this->parme('wz'),true);
            $data = [
                'uid'           =>  $this->parme('userid'), //站长ID
                'ad_type'       =>  1, //类型
                'title'         =>  $wz['title'].$wz['id'], //标题
                'cover'         =>  $wz['cover'], //封面
                'hitsmoney'     =>  floatval($this->parme('money')), //每次收益
                'allmoney'      =>  $hz['money']/2, //总金额
                'surplus'       =>  $hz['money']/2, //剩金额
                'ctime'         =>  $this->time, //创建时间
                'status'        =>  0, //审核状态 审核\n0待审核\n1通过\n2未通过\n3已结束\n4暂停
                'task_type'     =>  1, //任务类型\n1 是浏览\n2 是转发
                'start'         =>  0, //开始时间
                'endtime'       =>  0, //结束时间
                'aid'           =>  $wz['id'], //文章ID
                'hid'           =>  $hz['id'], //互转卷ID
                'hits'          =>  0, //点击数
                'no_share'      =>  floor($hz['money']/2/floatval($this->parme('money'))), //未分享点击数
            ];
            /**
             * 存redis
             * for($i=0;$i<floor($hz['money']/2/floatval($this->parme('money')));$i++){
             *    redis()->Rpush($i);
             * }
             */
            $id =   db(self::$table_mission)->insertGetId($data);
            for($i=0;$i<floor($hz['money']/2/floatval($this->parme('money')));$i++){
                redis()->rPush('task:'.$id,floatval($this->parme('money')));
            }
            if($id>0){
                $this->abnormal($this->Ok,'发布成功');
            }else{
                $this->abnormal($this->DbNull,'暂无任务');
            }
        }
    }

    //根据昵称获取站长未使用的互转卷和文章
    public function getuserid($nickname='')
    {
        if($this->parme('nickname')){
            $userid = db(self::$table_user)->where(['nick_name'=>$this->parme('nickname'),'del'=>0])->value(self::$primarykey_user);
            if($userid){
                //获取所有未使用的互转卷
                $hz = $this->gethz($userid);
                //获取所有文章
                $infolist = $this->getarticle($userid);
                $this->datas = array('hz'=>$hz,'infolist'=>$infolist);
            }else{
                $this->abnormal($this->DbNull,'暂无数据');
            }
        }else{
            $this->abnormal($this->DataError,'缺少参数');
        }
    }

    //根据站长id获取所有未使用的互转卷
    private function gethz($userid)
    {
        $hz = db(self::$table_hz)->where(['uid'=>$userid,'status'=>0])->select();
        if(count($hz)>0){
            return $hz;
        }else{
            return '';
        }
    }

    //根据站长id获取所有文章
    private function getarticle($userid)
    {
        $infolist = db(self::$table_infolist)->where(['uid'=>$userid,'del'=>0])->select();
        if(count($infolist)>0){
            return $infolist;
        }else{
            return '';
        }
    }


    //任务列表

    public function listtask()
    {
        $field = 'id,title,cover,status,hitsmoney';
        $task = db(self::$table_mission)->where(['uid'=>$this->parme('userid')])->select();
        if(count($task)>0){
            $this->datas = $task;
        }else{
            $this->abnormal($this->DbNull,'暂无任务');
        }
    }
    //更改任务状态

    public function changestatus()
    {
        $save = array();
        if($this->parme('taskid')){
            if($this->parme('flag') == '审核通过'){
                $save['status'] = 1; //审核状态 审核\n0待审核\n1通过\n2未通过\n3已结束\n4暂停
                $save['start'] = $this->time;
            }
            if($this->parme('flag') == '暂停'){
                $save['status'] = 4; //审核状态 审核\n0待审核\n1通过\n2未通过\n3已结束\n4暂停
            }
            if($this->parme('flag') == '继续'){
                $save['status'] = 1; //审核状态 审核\n0待审核\n1通过\n2未通过\n3已结束\n4暂停
                //$save['start'] = $this->time;
            }
            if($this->parme('flag') == '未通过'){
                $save['status'] = 2; //审核状态 审核\n0待审核\n1通过\n2未通过\n3已结束\n4暂停
                //$save['start'] = $this->time;
            }
            $res = db(self::$table_mission)->update($save);
            if($res !== false){
                $this->abnormal($this->OK,'操作成功');
            }else{
                $this->abnormal($this->DbError,'操作失败');
            }
        }else{
            $this->abnormal($this->DataError,'参数缺失');
        }
    }



}












